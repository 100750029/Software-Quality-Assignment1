#Name: Daniyal Khan
#Date: February 14, 2021
#Description: Welcome to Code Breaker! In this program, the user will be asked to guess a secret code 
#generated by the computer, given hints after each guess. The user will only be allowed 
#10 guesses in which they must guess the code. There are two types of clues, b and w. The
#letter b means that a colour in the users guess is in the right postion and the letter w
#means that a colour in the users guess is in the code but in the wrong position. 

import random

def create_code(characters, length):
    
    '''
    Returns a list the length of length (int) with any 
    random single characters from characters (str).
    
    >>> create_code("Daniyal", 4)
    ['D', 'i', 'y', 'l']
    >>> create_code("Hello", 3)
    ['H', 'H', 'H']
    '''
    
    #Creates the list that will store the code
    code = []
    #Adds a random letter from characters to code length amount of times
    for i in range(length):
        code.append(random.choice(characters))
        
    return code 

def find_fully_correct(answer, guess):
    
    '''
    Returns a list containing the letter "b" for each 
    colour in guess (list of strs) that is in the same position as the 
    same colour in answer (list of strs).  
    
    >>> find_fully_correct(['G', 'B', 'R', 'Y'], ['G', 'R', 'R', 'O'])
    ['b', 'b']
    >>> find_fully_correct(['R', 'R', 'O', 'P'], ['P', 'R', 'R', 'O'])
    ['b']
    >>> find_fully_correct(['P', 'G', 'R', 'O', 'Y'], ['Y', 'G', 'O', 'O', 'Y'])
    ['b', 'b', 'b']
    '''
    
    #Creates a list that will store the "b" clues 
    correct_b = []
    #Goes through each index value in answer 
    for i in range(len(answer)):
        #Checks if the colour at the index i in guess is 
        #the same colour at the index i in answer
        if guess[i] == answer[i]:
            #Adds a "b" to correct_b
            correct_b.append("b")
            
    return correct_b 

def remove_fully_correct(list1, list2):
    
    '''
    Returns a list that has all the characters in list1 
    except for those that are in the same position as the 
    same character in list2.
    
    >>> remove_fully_correct(['R', 'R', 'O', 'P'], ['P', 'R', 'R', 'O'])
    ['R', 'O', 'P']
    >>> remove_fully_correct(['A','B','O','D'], ['D','B','A','D'])
    ['A', 'O']
    >>> remove_fully_correct(['B', 'B', 'B'], ['A', 'B', 'B'])
    ['B']
    '''
    
    #Creates the new list 
    new_list = []
    #Goes through each index value in list1
    for i in range(len(list1)):
        #Checks if the letter at the index i in list1 is 
        #not the same letter at the index i in list 2
        if list1[i] != list2[i]:
            #Adds that letter to new_list 
            new_list.append(list1[i])
            
    return new_list
            
def find_colour_correct(answer, guess):
    
    '''
    Returns a list containing the letter "w" for each 
    character in guess (list of strs) that is also in answer (list of strs) 
    but isn't in the right position. 
    
    >>> find_colour_correct(['Y','P','G','G'],  ['G','P','O','R'])
    ['w']
    >>> find_colour_correct(['O', 'P', 'P', 'R'], ['O', 'R', 'P', 'P'])
    ['w', 'w']
    >>> find_colour_correct(['Y','P','G'],  ['G','G','O'])
    ['w']
    '''
    
    #Creates the list that will store all the "w" clues 
    correct_w = []
    #Removes all the colours that are in the right position from both answer and guess
    new_guess = remove_fully_correct(guess, answer)
    new_answer = remove_fully_correct(answer, guess)
    #Goes through each colour in new_guess
    for colour in new_guess:
        #Checks if the colour is in new_answer
        if colour in new_answer:
            #Adds a "w" to correct_w
            correct_w.append("w")
            #Removes that colour from new_answer so that it isn't checked twice 
            new_answer.remove(colour)
            
    return correct_w 
        
def display_game(guesses, clues):
    
    '''.
    Returns a string to display the current state of the game. The string should conatin the headers
    "Guess" and "Clues" seperated by a tab with the next line consisting of 20 "*". Each line after
    should be of each guess (sub-list) in guesses (list of lists) alongside the corresponding clue
    (sub-list) from clues (list of lists) which are sperated by a tab. 
    '''
    
    s = 'Guess\tClues\n' + '*' * 20 + '\n'
    for i in range(len(guesses)):
        for j in range(len(guesses[i])):
            s = s + guesses[i][j] + ' '
        s = s + '\t'
        for k in range(len(clues[i])):
            s = s + clues[i][k] + ' '
        s = s + '\n'
    return s

def valid(user_guess, valid_characters, guess_size):
    
    '''
    Returns True if all the characters in user_guess (list) are in
    valid_characters (str) and the length of user_guess is equal
    to guess_size (int).
    
    >>> valid(['H', 'E', 'L', 'L', 'O'], "HELOYT", 5)
    True
    >>> valid(['S'], "S", 3)
    False
    >>> valid(['G', 'R', 'R', 'Y'], "GRBYOP", 4)
    True
    '''
    
    #Checks if the length of user_guess is equal to guess_size
    if len(user_guess) == guess_size:
        #Goes through each character in user_guess
        for character in user_guess:
            #Returns False if the character is not found in valid_characters 
            if character not in valid_characters:
                return False
    else:
        return False
        
    return True 

def display_clues(guesses, clues, guess):
    
    '''
    A helper function that adds guess (list) to guesses (list of lists) 
    and uses guess to determine the clues that will be added to clues (list of lists) 
    so that they can be used as the arguments for the function display_game(). 
    Prints the function display_game.
    '''
    
    #Adds the users guess to a list of their previous guesses
    guesses.append(guess)
    #Stores all the "b" clues for this guess
    num_b = find_fully_correct(secret_code, guess)
    #Stores all the "w" clues for this guess
    num_w = find_colour_correct(secret_code, guess)
    #Puts both clues together into one list 
    num_b.extend(num_w)
    #Adds the clues for this guess to a list of the previous clues 
    clues.append(num_b)
    print (display_game(guesses, clues))

if __name__ == '__main__':

    #Asks the user which level of difficulty they would like to play 
    game_mode = input("What level of difficulty would you like to play (Easy, Regular, Hard): ")
    #Continously re-asks the user for a game_mode as long as game_mode is not valid
    while game_mode != "Easy" and game_mode != "Hard" and game_mode != "Regular":
        #Updates game_mode with the users new game mode 
        game_mode = input("Please enter a valid option (Easy, Regular, Hard): ")

    #Checks which game mode the user picked 
    if game_mode == "Regular":
        # the number of pegs in the answer for the game mode "Regular"
        SIZE = 4
        # the number of guesses the user gets for the game mode "Regular"
        TRIES = 10
    elif game_mode == "Easy":
        # the number of pegs in the answer for the game mode "Easy"
        SIZE = 3
        # the number of guesses the user gets for the game mode "Easy"
        TRIES = 12
    else:
        # the number of pegs in the answer for the game mode "Hard"
        SIZE = 5
        # the number of guesses the user gets for the game mode "Hard"
        TRIES = 8

    # the letters allowed representing the colours
    # green, red, blue, yellow, orange, purple
    VALID_CHARS = 'WORDLE'
  
    # fill in the rest...
  
    #This list will store all the clues given
    clues = []
    #This list will store all of the users guesses
    guesses = []
    #Creates the secret code using the function create_code() 
    secret_code = create_code(VALID_CHARS, SIZE)

    #Runs as many times as the users number of tries 
    for i in range(TRIES):
        #Asks the user for their guess 
        guess = input("Please enter guess number " + str(i + 1) + " of length " + str(SIZE) + " using the letters " + VALID_CHARS + ": ")
        #Converts the users guess into a list so that it can be compared to secret_code 
        guess = list(guess)
        #Continously asks the user for a valid guess as long as their guess is not valid
        while not valid(guess, VALID_CHARS, SIZE):
            #Updates guess to store the users new guess 
            guess = input("Please re-enter a valid guess of length " + str(SIZE) + " using the letters " + VALID_CHARS + ": ")
            #Converts the users guess into a list so that it can be compared to secret_code 
            guess = list(guess)
            #Checks if the users guess matches the code (if they have won)
        if guess == secret_code:
            #Displays the clues
            display_clues(guesses, clues, guess)
            print ("Congratualtions! It took you " + str(i + 1) + " guesses to find the code.")
            #Breaks the for loop so that the user is not asked to guess again (the game has ended)
            break
        else:
            #Displays the clues 
            display_clues(guesses, clues, guess)
      
    #The secret_code will be given if the user looses because they have no tries left 
    #(the for loop finished and the user was unable to guess the right code)    
    if guess != secret_code:
        print("I'm sorry you lose. The correct code was " + ("").join(secret_code) + ".")
    
    
